AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Consumer side of CFN Artifact Distribution.

Parameters:

  # TODO: Should the distributor stack export these values? Then only the distributor stack has to be set as a parameter.
  DistributionTopic:
    Type: String
    Default: "arn:aws:sns:eu-west-1:529985782713:build-artifact-distributor-DistributionTopic-1A5L07HYRFVRA"

  DistributionRegion:
    Type: String
    Default: "eu-west-1"

  DistributionBucket:
    Type: String
    Default: tts-cloud-artifacts-529985782713-eu-west-1

  InitialDistributionRole:
    Type: String
    Default: "arn:aws:iam::529985782713:role/TriggerInitSetRole"

  InitialDistributionSetMachine:
    Type: String
    Default: "arn:aws:states:eu-west-1:529985782713:stateMachine:InitSetRetrieverMachine-i1BYUlZbD1Si"

  Version:
    Type: String

Resources:

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "tts-cloud-artifacts-${AWS::AccountId}-${AWS::Region}"

  CopyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: copy_files
      Timeout: 30
      MemorySize: 512
      Role: !GetAtt CopyRole.Arn
      Handler: function.handler
      Runtime: python3.6
      Environment:
        Variables:
          ARTIFACTS_BUCKET: !Ref ArtifactsBucket
          DISTRIBUTOR_BUCKET: !Ref DistributionBucket

  CopyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        # TODO: Is this necessary? CloudWatch Logs did not seem to work without this in us-east-1.
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: allowSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt Queue.Arn
        - PolicyName: allowPutObject
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "${ArtifactsBucket.Arn}/*"

  QueueToCopyFunctionMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt Queue.Arn
      FunctionName: !Ref CopyFunction

  Queue:
    Type: AWS::SQS::Queue
    DependsOn: ArtifactsBucket

  QueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref DistributionTopic
      Protocol: sqs
      Endpoint: !GetAtt Queue.Arn
      Region: !Ref DistributionRegion
      RawMessageDelivery: true
      FilterPolicy:
        account: ["ALL", !Sub "${AWS::AccountId}"]
        region: ["ALL", !Sub "${AWS::Region}"]

  ConsumerQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref Queue
      PolicyDocument:
        Id: "DistributorTopicPolicy"
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "sqs:SendMessage"
            Resource: "*"
            Condition:
              ArnEquals:
                "aws:SourceArn": !Ref DistributionTopic

  # Commented out to during development
  InitialSetTrigger:
    Type: Custom::InitialSetTrigger
    Properties:
      ServiceToken: !GetAtt InitialSetTriggerFunction.Arn
      Version: !Ref Version
    DependsOn: Queue

  InitialSetTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: init_set_trigger
      Handler: function.handler
      Timeout: 3
      Role: !GetAtt InitialSetTriggerRole.Arn
      Runtime: python3.6
      Environment:
        Variables:
          INITIAL_DISTRIBUTION_MACHINE: !Ref InitialDistributionSetMachine
          INITIAL_DISTRIBUTION_ROLE: !Ref InitialDistributionRole
          INITIAL_DISTRIBUTION_REGION: !Ref DistributionRegion
          CONSUMER_ACCOUNT_ID: !Sub "${AWS::AccountId}"
          CONSUMER_REGION: !Sub "${AWS::Region}"


  InitialSetTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Invoke-Init-Set-Distribution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action: sts:AssumeRole
              Resource: arn:aws:iam::529985782713:role/TriggerInitSetRole