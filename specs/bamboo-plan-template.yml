---
#default anchors
default_notification: &default_notification
  type: PlanFailedNotification
  recipients:
  - type: CommittersRecipient

default_polling_trigger: &default_polling_trigger
- type: RepositoryPollingTrigger
  name: Repository polling
  pollingPeriod: 60
  pollingPeriodUnit: sek

work_dir: &work_dir ""

plan_repo: &plan_repo
  name: {{repository.name}}
  sshCloneUrl: {{repository.url}}
  projectKey: {{repository.project.key}}
  serverName: tts Bitbucket
  remoteAgentCacheEnabled: false

commit_triggers_build: &commit_triggers_build
  <<: *default_polling_trigger
  selectedTriggeringRepositories:
  - repository:
    type: VcsRepositoryIdentifier
    name: {{repository.name}}

default_job: &default_job
  key: JOB1
  name: Build, package SAM project, upload to s3 bucket
  description: Build, package SAM project
  requirements: []
  cleanWorkingDirectory: true

require_sam_capability: &require_sam_capability
  type: AnyTask
  description: Run Job on build agent with SAM installed
  completeModuleKey: com.atlassian.bamboo.plugin.requirementtask:task.requirements
  configuration:
    existingRequirement: 'system.builder.command.sam'
    regexMatchValue: ''
    requirementKey: ''
    requirementMatchType: exist
    requirementMatchValue: ''

checkout_task: &checkout_task
  type: VcsCheckoutTask
  description: git clone
  cleanCheckout: true
  vcsRepos:
  - repoName: {{repository.name}}
    checkoutDirectory: *work_dir

run_unit_tests: &run_unit_tests
  type: ScriptTask
  description: Run Python unit tests
  enabled: {{tests.enabled}}
  workingSubdirectory: *work_dir
  environmentVariables: PIPENV_VENV_IN_PROJECT=true AWS_DEFAULT_REGION={{tests.region}}
  inlineBody: |
    export PATH="$HOME/.pyenv/bin:$PATH"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
    pyenv global 3.6.7
    pipenv install -d
    pipenv run python -m pytest --junitxml=test-reports/pytest-results.xml
    pyenv global system

parse_test_results: &parse_test_results
  type: TestParserTask
  description: Evaluate Test Results
  enabled: {{ tests.enabled }}
  testType: JUNIT
  resultDirectories: "**/test-reports/*.xml"

build_package_upload: &build_package_upload
  type: ScriptTask
  description: Build, package, upload to S3
  workingSubdirectory: *work_dir
  environmentVariables: AWS_DEFAULT_REGION=${bamboo.aws.region}
  inlineBody: |
    #!/bin/bash
    set -e

    TEMPLATES_BUCKET=${bamboo.templates.bucket}
    TEMPLATES_PREFIX="tts-cloud/${bamboo.planRepository.name}/${bamboo.planRepository.branch}/${bamboo.buildNumber}"
    TEMPLATES_PREFIX_LATEST="tts-cloud/${bamboo.planRepository.name}/${bamboo.planRepository.branch}/latest"
    OUTPUT_TEMPLATE_NAME=packaged.yaml

    echo .................................
    echo replace variables in template

    STAGE="${bamboo_shortPlanName}"
    if [[ "$STAGE" == "Build Artifact Consumer" ]]
    then
      STAGE="prod"
    fi

    find . -type f | grep \\\template.yaml\$ | xargs -n1 -I{} sed -i "s/#{buildNumber}/${bamboo_buildNumber}/g;s/#{stage}/$STAGE/g" {}

    echo .................................


    aws cloudformation package \
        --template-file template.yaml \
        --s3-bucket ${TEMPLATES_BUCKET} \
        --s3-prefix ${TEMPLATES_PREFIX} \
        --output json > ${OUTPUT_TEMPLATE_NAME}
    S3_URL=s3://${TEMPLATES_BUCKET}/${TEMPLATES_PREFIX}/${OUTPUT_TEMPLATE_NAME}
    S3_URL_LATEST=s3://${TEMPLATES_BUCKET}/${TEMPLATES_PREFIX_LATEST}/${OUTPUT_TEMPLATE_NAME}
    HTTPS_URL=https://${TEMPLATES_BUCKET}.s3.amazonaws.com/${TEMPLATES_PREFIX}/${OUTPUT_TEMPLATE_NAME}
    aws s3 cp ${OUTPUT_TEMPLATE_NAME} ${S3_URL}
    aws s3 rm s3://${TEMPLATES_BUCKET}/${TEMPLATES_PREFIX_LATEST}/ --recursive
    aws s3 cp ${OUTPUT_TEMPLATE_NAME} ${S3_URL_LATEST}
    echo && echo ${HTTPS_URL}

    cat > templateS3Key.txt <<EOF
    ${TEMPLATES_PREFIX}/${OUTPUT_TEMPLATE_NAME}
    EOF

deployment_config: &deployment_config
  name: TemplateS3Key
  copyPattern: "templateS3Key.txt"
  location: "."
  shared: true
  required: true

plan_branch_management: &plan_branch_management
  createPlanBranchesProperties:
    trigger: branch
    matchingPattern: dev
  branchCleanupProperties:
    removeInactiveFromRepository: true
    removeInactiveFromRepositoryAfterDays: 7
  issueLinkingEnabled: true
  planBranchManagementProperties:
    triggeringOption: INHERITED
    notificationStrategy: INHERIT

#project description
project:
  key: {{project.key}}
  name: {{project.name}}
  branch: master
  plans:
  - type: BuildPlan
    key: {{plan.key}}
    name: {{plan.name}}
    description: {{plan.description}}
    planBranchManagement:
      <<: *plan_branch_management
    planRepositories:
    - <<: *plan_repo
    notifications:
    - <<: *default_notification
    triggers:
    - <<: *commit_triggers_build
    variables:
      aws.region: {{aws.region}}
      templates.bucket: {{aws.templatesBucket}}
    stages:
    - name: Default Stage
      jobs:
      - <<: *default_job
        tasks:
        - <<: *require_sam_capability
        - <<: *checkout_task
        - <<: *run_unit_tests
        - <<: *parse_test_results
        - <<: *build_package_upload
        artifacts:
          - <<: *deployment_config
    dependencies:
    {% for key in dependencies -%}
    - key: {{ key }}
    {%- endfor %}
